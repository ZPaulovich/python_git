from datetime import datetime, date
# Класс для вывода разделяющей строки при печати списков
class Line:

    def __init__(self, length, sign):
        self.ln = int(length)
        self.s = str(sign)

    def __str__(self):
        line = []
        line.append(self.s * self.ln)
        line = '\n'.join(line)                # turning the list into a string
        return line

class Student:

    def __init__(self, studid="2000", name="Name0", lastname="LastName0", birthday="09 03 2000",
                 address="address0", phone="phone0", faculty="FPM", course=1, group=2):
        self.__studid = studid
        self.__name = name
        self.__lastname = lastname
        self.__birthday = birthday
        self.__address = address
        self.__phone = phone
        self.__faculty = faculty
        self.__course = course
        self.__group = group

    def __str__(self):
        return self.__studid + " " + self.__name + " " + str(self.__lastname) + ", " + self.get_age() \
               + ", " + self.__address + " " + self.__phone + ", " + self.__faculty \
               + ", " + str(self.__course) + ", " + str(self.__group)

# Расчет возраста
    def get_age(self):
        today = date.today()
        date_of_birth = datetime.strptime(self.__birthday, "%d %m %Y")
        return "Age: %s years" % (today.year - date_of_birth.year -
                                 ((today.month, today.day) < (date_of_birth.month, date_of_birth.day)))

# Метод возвращающий значение аргумента "faculty"
    def get_faculty(self):
        return self.__faculty

# Метод возвращающий значение аргумента "group"
    def get_group(self):
        return self.__group

# Метод возвращающий значение аргумента "studid"
    def get_studid(self):
        return self.__studid

# Создаем экземпляр объекта Line() для вывода строки "---------------------"
ln = Line(76, '-')

# Список экземпляров объекта students()
students = [

    Student("1021", "Name11", "LastName11", "05 12 1999", "Address11", "NumberPhone11", "FPM", 4, 2),
    Student("1001", "Name1", "LastName1", "05 06 1999", "Address1", "NumberPhone1", "FPM", 4, 1),
    Student("1002", "Name2", "LastName2", "05 02 2000", "Address2", "NumberPhone2", "FPM", 4, 1),
    Student("1004", "Name3", "LastName3", "05 03 2000", "Address3", "NumberPhone3", "FPM", 4, 1),
    Student("1010", "Name4", "LastName4", "01 05 2000", "Address4", "NumberPhone4", "FPM", 4, 2),
    Student("2001", "Name5", "LastName5", "10 02 1998", "Address5", "NumberPhone5", "MMF", 4, 1),
    Student("1005", "Name6", "LastName6", "10 03 2000", "Address6", "NumberPhone6", "FPM", 4, 1),
    Student("1015", "Name7", "LastName7", "15 06 1998", "Address7", "NumberPhone7", "FPM", 4, 2),
    Student("1020", "Name8", "LastName8", "11 04 2000", "Address8", "NumberPhone8", "FPM", 4, 2),
    Student("2003", "Name9", "LastName9", "20 10 1998", "Address9", "NumberPhone9", "MMF", 4, 1),
    Student("1009", "Name10", "LastName11", "21 01 2000", "Address10", "NumberPhone10", "FPM", 4, 1),
    Student("2004", "Name12", "LastName12", "05 06 1998", "Address12", "NumberPhone12", "MMF", 4, 1),
    Student("1018", "Name13", "LastName13", "05 07 2000", "Address13", "NumberPhone13", "FPM", 4, 2),
    Student("1011", "Name14", "LastName14", "05 08 2000", "Address14", "NumberPhone14", "FPM", 4, 1),
    Student("1008", "Name15", "LastName15", "10 08 1997", "Address15", "NumberPhone15", "FPM", 4, 1)

]
#
# Добавление экземпляра объекта и включение его в список
#
def add_stu():

    print("Введите идентификатор в формате ХХХХ: ")
    a1 = input()
    print("Введите имя: ")
    a2 = input()
    print("Введите фамилию: ")
    a3 = input()
    print("Введите дату рождения в формате ДД ММ ГГГГ: ")
    a4 = input()
    print("Введите адрес: ")
    a5 = input()
    print("Введите номер телефона: ")
    a6 = input()
    print("Введите факультет: ")
    a7 = input()
    print("Введите курс: ")
    a8 = int(input())
    print("Введите номер группы: ")
    a9 = int(input())
    st = Student(a1, a2, a3, a4, a5, a6, a7, a8, a9)
    students.append(st)

# Печать списка студентов заданного факультета и группы
# Переменная mark используеться для вывода заголовка списка
# Если нет списка для вывода, то заголовок также не будет выводиться
#
def get_students_by_group_number(group, faculty, mark):

    for i in students:
        if i.get_group() == group and i.get_faculty() == faculty:
            if mark is False:
                mark = True
                print("List of the students by group " + str(group) + " and faculty: " + faculty)
                print(ln)
            print(i.__str__())

# Печать списка студентов заданного факультета
# Переменная mark используеться для вывода заголовка списка
# Если нет списка для вывода, то заголовок также не будет выводиться
#
def get_students_by_faculty(faculty, mark):

    for i in students:
        if i.get_faculty() == faculty:
            if mark is False:
                mark = True
                print("List of the students by faculty name: " + faculty)
                print(ln)
            print(i.__str__())
    print()
    return mark

#
# Ввод режима с консоли
#
mode = "Y"
while mode == "Y" or mode == "y":

    print("Режим добавления записей? Введите Y / N ")
    mode = input()
#    
# Обработка добавления записей по студентам
#
    if mode == "Y" or mode == "y":
        add_stu()
#
print("Ввод закончен")
print(ln)
"""
# Печать списка всех студентов
#
print(ln)
print("Full list of students: ")
print(ln)

for stt in students:
    print(stt)
print(ln)
print()
"""
#
# Ввод с консоли названия факультета
#
print("Put the faculty name: ")
fc = input()
pr = False
#
# выполняется проверка введенного значения на "пусто"
#
if not fc:                         # an empty string
    print("Your input for the faculty name is empty. Exit")
else:
    pr = get_students_by_faculty(fc, pr)

# На запрос номера группы заданного факультета мы пойдем только в случае,
# если есть список данного факультета.
# Также выполняется проверка введенного значения на "пусто" или "ввод символа, а не числа"
#
if pr is True:
    pr = False
    print("Put the group number: ")
    gn = input()
#    
# проверка введенного значения на "пусто" или "ввод символа, а не числа"
#
    if not gn:                         # an empty string
        print("Your input for the group number is empty. Exit")
    elif gn.isdigit() is False:
        print("Your input for the group must be a number. Exit")
    else:
        get_students_by_group_number(int(gn), fc, pr)
